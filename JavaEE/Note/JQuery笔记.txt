[JQuery]
  JQuery：即 JavaScript 和 Query，是辅助JavaScript开发的js类库。

  JQuery的核心思想：write less,do more，所以他实现了很多浏览器兼容性问题

  Jquery好处：免费、开源，其语法使得操作文档对象，选择DOM元素，制作动画，事件处理，使用Ajax以及其他功能。


[JQuery使用]
  1、写一个引入 script标签JQuery
  2、再写一个script标签 通过alert($)，查看JQuery是否成功引入。【出现jQuery = function( selector, context ) 就是成功引入】
  3、动态注册onload事件
        原生js： window.onload = function() {}   //具体代码写在方法体中
        JQ: $()   //具体代码写在方法体中
  4、查找对象
        原生js：let btnObj = document.getElementById("btnId");
        JQ：let $btnObj = $("#btnId");   //$btnObj 加上$ 表示是一个JQ对象，$("#btnId") 表示用id查找器查找
  5、操作
        原生js:$btnObj.onclick = function() {}  //具体代码写在function函数体内
        JQ:$btnObj.click(function(){})  //JQ对象的click()方法 就表示onclick事件,具体代码写在内部function函数体内
   例子：
     <script type="text/javascript" src="../script/jquery-1.7.2.js"></script>
     <script type="text/javascript">alert($);</script>
     下面操作见：01.HelloWorld.html



    常见问题：
      1、一定要引入JQuery文件吗？
        答案：必须引入
      2、JQuery中的 $ 符号到底是什么？
        答案：$是一个函数
      3、JQ怎么为按钮绑定响应函数？
        答案：和原生js步骤一样
         · 使用JQ查询到 JQ标签对象（$开头）
         · 使用 JQ标签对象（$开头）.click(function() {})


[JQ核心函数]
  $是JQ中的核心函数，能完成JQ的很多功能。$()就是调用这个函数 相当于window.onload = function() {}

  1、传入参数为函数是时：表示页面加载完成后，自动执行这个函数。
    格式：$(function() {});

  2、传入是HTML字符串时：会帮我们创建这些html标签对象【当然要放在function内部，$(function() {})】
    格式：$(function() {
            $("参数");
          });
    例子：
      $(function () {
                  $("<div>\n"<h1>你好</h1>").appendTo("body");
              });

  3、传入参数为 选择器字符串(#btnid/.className/标签名)时：表示查找，以指定选择器查找对象
    格式：
        $(function() {
            $("#id");  //css id选择器
            $(".className"); //css 类型选择器
            $("标签名");  //css 标签名选择器
          });

  4、传入参数为DOM对象时：会把DOM对象转成JQ对象
    格式：var $1 = $(btnObj);


[JQ对象和DOM对象]
  DOM对象：
    通过getElementById、getElementByName、getElementByTagName、createElement的都是DOm对象
    alert 输出为 [object HTML标签名Element]


  JQ对象：
    · 通过JQ创建出来的  如：$1 = $("<div>\n"<h1>你好</h1>"); //传参 为html
    · 通过JQ包装的  如：var $1 = $(btnObj); //传参为DOM对象
    · 通过JQ的API查到的也是 JQ对象  如：$2 = $("#id");  //传参为 css 选择器
    alert 输出为 [object Object]


[JQ对象本质]
  JQ对象是dom对象的集合/数组 + JQ函数
  公式：
    JQ对象=dom对象[] + JQ函数

[JQ对象和DOM对象的使用区别]
  DOM对象：不能使用使用jq对象的属性和方法

  JQ对象：不能使用使用dom对象的属性和方法

  相互转化才能使用对应方法


[JQ对象和DOM对象的相互转换**]
  1、dom对象转成jq对象
    用法：$1 = $(dom对象)

  2、jq对象转成dom对象 【核心：jq对象 = dom对象 + jq方法，jq对象是数组】
    let 对象名 = jq对象[下标]



[JQ选择器--基本选择器***]  具体见JQ API文档
  · $("#id") id选择器
  · $("标签名") 标签名选择器
  · $(".className") 类型选择器
  · $("#id,标签名1,标签名2.className") 组合选择器，{#id的结果 U 标签名1 U 标签名2.className的结果}

  说明：
    1 、标签名2.className 表示标签名是 标签名2 并且其类型class是 className 【注意不能有空格】
    2、查询到结果/集合 的顺序为：页面显示的顺序，不是选择类型的顺序


[JQ选择器--层级选择器***]  具体见JQ API文档
  · $("祖先 后代")  后代选择器   //查找给定 祖先 下 匹配 后代 的所有元素
    如：$("form input") //查找 form 内部所有 input标签

  · $("父 > 子")  子元素代选择器   //查找给定 父亲下  匹配  子的所有元素
    注意：只包含直接子元素，孙子元素不算
    如：$("form > input") //查找 form 下直接子元素 input标签

  · $("prev + next")  紧跟元素选择器 //查找紧跟prev元素的next元素，间隔1个都不行，必须紧跟
   如：$("table + input")  //查找所有紧跟在table标签后的input，间隔1个标签都不行

  · $("prev ~ siblings")  //匹配prev元素之后所有siblings 【同级，不管间隔多少都算】
   如：$("form ~ input") 匹配所有form标签后的 input 兄弟元素


*****【条件1:条件2】：意思就是查找满足条件1的 然后 过滤一下 又满足条件2的
***过滤条件一般是顺序，所以基本的还要在左边写即【【【先写标签名，再写过滤器】】】
[JQ选择器--基本 过滤选择器***]  具体见JQ API文档
   · $(":first") //获取第一个元素
   · $(":last") //获取最后一个元素
   · $(":not(selector)") //去除所有与给定选择器匹配的元素 【即：匹配上的不要，要其余所有的】
   · $(":even") //匹配所有索引值为偶数的元素，从 0 开始计数
   · $(":odd") //匹配所有索引值为奇数的元素，从 0 开始计数
   · $(":eq(index)") //匹配一个给定索引值的元素
   · $(":gt(index)") //匹配所有大于给定索引值的元素
   · $(":lt(index)") //匹配所有小于给定索引值的元素
   · $(":header") //匹配如 h1, h2, h3之类的标题元素
   · $(":animated") //匹配所有正在执行动画效果的元素



*****【条件1:条件2】：意思就是查找满足条件1的 然后 过滤一下 又满足条件2的
***过滤条件一般是顺序，所以基本的还要在左边写即【【【先写标签名，再写过滤器】】】
[JQ选择器--内容 过滤选择器***]  具体见JQ API文档
   · $(":contains(text)") //匹配包含给定文本的元素
   · $(":empty") //匹配所有不包含子元素或者文本的空元素
   · $(":parent") //匹配含有子元素或者文本的元素 【即匹配所有非空元素【】。
   · $(":has(selector)") //匹配含有选择器所匹配的元素的元素 【即满足两个选择器】





*****【条件1:条件2】：意思就是查找满足条件1的 然后 过滤一下 又满足条件2的
***过滤条件一般是顺序，所以基本的还要在左边写即【【【先写标签名，再写过滤器】】】
[JQ选择器--属性 过滤选择器***]  具体见JQ API文档
   · $("[attribute]]") //匹配包含给定属性的元素。
      如：$("div[id]")  查找所有含有 id 属性的 div 元素


   · $("[attribute=value]") //匹配给定的属性是某个特定值的元素
      如：("input[name='newsletter']") 查找所有 name 属性是 newsletter 的 input 元素


   · $("[attribute!=value]") //匹配所有不含有指定的属性，或者属性不等于特定值的元素。
      此选择器等价于：not([attr=value])
      如：("input[name='newsletter']") 查找所有 name 属性是 newsletter 的 input 元素


    · 要匹配含有特定属性但不等于特定值的元素，请使用[attr]:not([attr=value])**


    · $([attribute^=value])  //匹配给定的属性是以某些值开始的元素


    · $([attribute$=value])  //匹配给定的属性是以某些值结尾的元素


    · $([attribute*=value])  //匹配给定的属性是以包含某些值的元素 [不限制位置]


    · $([selector1][selector2][selectorN])  //复合属性选择器，需要同时满足多个条件时使用



*****【条件1:条件2】：意思就是查找满足条件1的 然后 过滤一下 又满足条件2的
***过滤条件一般是顺序，所以基本的还要在左边写即【【【先写标签名，再写过滤器】】】
[JQ选择器--表单 过滤选择器***]  具体见JQ API文档
  · $(":input")  //匹配所有 input, textarea, select 和 button 元素

  · $(":text")  //匹配所有的单行文本框   【只要input标签的 type属性为text】
  · $(":password")  //匹配所有密码框    【只要input标签的 type属性为password】

  · $(":radio")  //匹配所有单选按钮   【只要input标签的 type属性为radio】
  · $(":checkbox")  //匹配所有复选框  【只要input标签的 type属性为 checkbox 】
  · $(":submit")  //匹配所有提交按钮   【只要input标签的 type属性为 submit 】
  · $(":image")  //匹配所有图像域   【只要input标签的 type属性为 image 】
  · $(":reset")  //匹配所有重置按钮   【只要input标签的 type属性为 reset 】
  · $(":button")  //匹配所有按钮   【只要input标签的 type属性为 button 】
  · $(":file")  //匹配所有文件域   【只要input标签的 type属性为 file 】
  · $(":hidden")  //匹配所有不可见元素，或者type为hidden的元素   【只要input标签的 type属性为 hidden ，或不可见元素】
    如：
      <tr style="display:none"><td>Value 1</td></tr>
      <input type="hidden" name="id" />



*****【条件1:条件2】：意思就是查找满足条件1的 然后 过滤一下 又满足条件2的
***过滤条件一般是顺序，所以基本的还要在左边写即【【【先写标签名，再写过滤器】】】
[JQ选择器--表单对象属性 过滤选择器***]  具体见JQ API文档
  · $(":enabled")  //匹配所有可用元素
      如：没有 所有没有disabled属性的


  · $(":disabled")  //匹配所有不可用元素
      如：所有含有 disabled
       <input name="email" disabled="disabled" />

  · $(":checked")  //匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)

  · $(":selected")  //匹配所有选中的option元素



[JQ元素筛选 --为函数调用方法]
  · $("选择器").eq(index|-index)  //获取第N个元素 序号正算/倒过来算
    如：$("p").eq(1)

  · $("选择器").first()  //获取第1个元素
    如：如：$("p").first()

  · $("选择器").last()  //获取最后第个元素

  · $("选择器").hasClass()  //检查当前的元素是否含有某个特定的类className，如果有，则返回true。
    相当于： is("." + class）

  · $("选择器").filter(expr|obj|ele|fn)  //筛选[含有/满足过滤条件]出与指定表达式匹配的元素集合  ,分隔
            expr 选择器
            obj  JQ对象
            ele  标签
            fn   函数
  · $("选择器").is(expr|obj|ele|fn)  //根据选择器、DOM元素或 jQuery 对象来检测匹配元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。

  · $("选择器").has(expr|ele)  //保留包含特定后代的元素，去掉那些不含有指定后代的元素


  · $("选择器").not(expr|ele|fn)  //删除与指定表达式匹配的元素,即反选

  · $("选择器").children([expr]) //获取指定元素的 所有子元素集合   与$("p>span")相同。

  · $("选择器").find(expr|obj|ele)  //搜索所有与指定表达式匹配的元素  与与$("p span")相同。


  · $("选择器").next([expr])  //获取当前元素的下一个【仅1个】兄弟元素

  · $("选择器").nextAll([expr])  //获取当前元素的下所有兄弟元素
  · $("选择器").nextUntil([exp|ele][,fil])  //查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止 【不包含until】
  · $("选择器").parent([expr])  //取出指定元素的父元素
  · $("选择器").prev([expr])  //取出指定元素的前一个兄弟元【only 1】素
  · $("选择器").prevAll([expr])  //查找当前元素之前所有的同辈元素
  · $("选择器").prevUntil([exp|ele][,fil])  //查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止。【不包含until】
  · $("选择器").siblings([expr])  //返回当前节点的前后所有兄弟元素
  · $("选择器").add(expr|ele|html|obj[,con])  //把与表达式匹配的元素添加到jQuery对象中返回，两个条件的并集
  · $("选择器").first()  //获取第1个元素


[JQ属性操作]
  · html()  //可以设置和获取起始标签 和结束标签中的内容  跟dom属性 innerHTML一样
  · text()  //可以设置和获取起始标签 和结束标签中的文本  跟dom属性 innerText一样
  · value()  //可以设置和获取表单项的value属性值       跟dom属性 value一样
    注意： 一般输入的表单项就是  无参数获取value， 有参数赋值value
          对【单选，多选，下拉选择】 无参数就是获取value值，有参 填入对应选择的value值 就是选择此选项

    【attr 返回属性的值 checked readOnly...】
  · attr(name|properties|key,value|fn)   //设置或返回被选元素的属性值。 [不推荐操作 checked，readOnly，selected，disabled等等]
     因为如果上面用attr获取，如果页面没有显示定义这四种 会返回undefined
    【prop返回属性是否有值 true false】

    ***attr可以操作自定义属性 如 hello="no"


  · prop(name|properties|key,value|fn)   //设置或返回被选元素的属性值。 [仅推荐操作checked，readOnly，selected，disabled等等]
    因为如果上面用attr获取，如果页面没有显示定义这四种 会返回false

    ***prop不可以操作自定义属性 如 hello="no"


[DOM的增删改]
    a.appendTo(b)   把a插入到b子元素末尾，成为最后一个子元素
    a.prependTo(b)  把a插入到b子元素前面，成为第一个子元素 【父子】


    a.insertAfter(b)      把a插入到b的后面，得到ba
    a.insertBefore(b)     把a插入到b子的前面，得到ab【兄弟】


    a.replaceWith(b)         把b元素替换a   //所有的a 只替换成一个b
    a.replaceAll(b)          把a元素替换b   //有几个a就换成几个b


    a.remove()     删除a标签
    a.empty()      清空a标签里的内容

[JQ的css样式]
  · addClass(class|fn)  添加class样式
  · removeClass(class|fn)  删除class样式
  · toggleClass(class|fn[,sw])  如果存在（不存在）就删除（添加）一个类。
  · offset([coordinates])  获取匹配元素在当前视口的坐标


[JQ动画效果]
  · show([speed,[easing],[fn]]) 将隐藏的元素显示 //已经显示的没效果
  · hide([speed,[easing],[fn]]) 隐藏显示的元素  //已经隐藏的没效果


  · fadeIn([speed],[easing],[fn]) 淡入 慢慢出现。
  · fadeOut([speed],[easing],[fn]) 淡出 慢慢消失。

  · fadeTo([[speed],opacity,[easing],[fn]]) 在规定时长内慢慢的将透明度修改到指定的值

  · fadeToggle([speed,[easing],[fn]]) 淡入淡出



[原生js和jQuery页面加载完成之后的区别]
   · 先执行：JQ页面 再执行 原生js页面

   原因：JQ先执行是因为 浏览器内核解析完页面的标签 创建好dom对象之后 马上执行
        原生js是等 浏览器内核解析完页面的标签 创建好dom对象，还要等标签显示时需要的内容加载完成【如图片等】。

   执行顺序：
      1、原生js 只会执行最后一个 window.onload = function() {} ，他会把前面的都覆盖
      2、Jquery 你写几个他就执行几个$(function () {})，按照你写的顺序

   原生js ：window.onload = function() {};
     什么时候触发：


   JQ ：$(function () {});
     什么时候触发：



[JQ中其他事件的处理方法]
    · click([[data],fn])  绑定或触发一次单击事件
    · bind(type,[data],fn)   为每个匹配元素的特定事件绑定事件处理函数
    · one(type,[data],fn) 为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。
    · unbind(type,[data|fn]]) bind()的反向操作，从每一个匹配的元素中删除绑定的事件

    · live(type, [data], fn) 【动态绑定，就算是后面加的元素 只要符合条件也会被绑定】
            jQuery 给所有匹配的元素附加一个事件处理函数，即使这个元素是以后再添加进来的也有效。


[JQ事件的冒泡]
    · 什么是事件的冒泡？
    答：事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素事件时，同一个事件也被传递到父元素的时间里去响应
        【父子绑定同一个事件如click，如果只点了子但是父也会响应】

    · 如何阻止事件的冒泡
    答：只需要在子元素触发的函数内最后返回 return false即可


[js事件对象]
    js对象的用处： 和JQ的bind结合使用，因为bind传递多个事件，执行的内容相同。但通过event.type 可以区分事件的类型从而执行不同的代码
        例：见 js对象的用处.html
   · 每次触发事件时，都会有一个对象记录事件 触发时所有的信息

   如何获取js事件对象？
   答：在给元素绑定事件的时候，在事件的回调函数传递一个参数，这个参数就是js中事件触发的对象
        参数名不定，一般为event

  原生js获取事件对象：
   js对象.onclick = function(){{(function(event) {console.log(event);})}
  JQ获取事件对象：
   jQ对象.onclick = function(){{(function(event) {console.log(event);})}